on:
  - push

jobs:
  build-linux:
    name: Use clang and gcc via "Unix Makefiles"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [clang, gcc]
    steps:
      - uses: actions/checkout@v4
      - run: |
          cmake -Bbuild -DCMAKE_C_COMPILER=${{ matrix.compiler }}
          cmake --build build

  build-windows-ninja:
    name: Use clang and clang-cl via Ninja
    runs-on: windows-latest
    strategy:
      matrix:
        # On Windows, clang only enables the WIN32 flag in CMake whereas
        # clang-cl also enables MSVC, because it has a cl.exe-like interface.
        compiler: [clang, clang-cl]
    steps:
      - uses: actions/checkout@v4
      - run: |
          # Use Ninja because the MSBuild toolchain can only configure
          # alternative compilers via "toolsets", where only ClangCL is
          # supported.
          cmake -Bbuild -GNinja -DCMAKE_C_COMPILER=${{ matrix.compiler }}
          cmake --build build

  build-windows-msbuild:
    name: Use MSVC and clang-cl via MSBuild
    runs-on: windows-latest
    strategy:
      matrix:
        toolset:
          # The default toolset should be the latest 'v143' when nothing is specified
          -
          - -TClangCL
    steps:
      - uses: actions/checkout@v4
      - run: |
          cmake -Bbuild ${{ matrix.toolset }}
          cmake --build build
